class Solution:
    def findPairs(self, nums: List[int], k: int) -> int:
        """
        if k < 0:
            return 0
        elif k == 0:
            lens = len(nums)
            count = 0
            map1 = {}
            for i in range(lens):
                if nums[i] not in map1:
                    map1[nums[i]] = 0
                else:
                    map1[nums[i]] = 1
            for key in map1:
                #print(str(key)+':'+str(map1[key]))
                if map1[key] == 1:
                    count += 1
        else:
            count = 0
            nums = sorted(list(set(nums)))
            lens = len(nums)
            for i in range(lens-1):
                for j in range(i+1,lens):
                    if nums[j] - nums[i] == k:
                        count += 1
                        break
                    elif nums[j] - nums[i] > k:
                        break
        return count
        """
        
        """
        if k < 0:
            return 0
        if k == 0:
            return min(len(nums) - len(set(nums)),len(set(nums)))
        if k > 0:
            dif = [x-k for x in nums]
            return len(set(dif) & set(nums))
        """
        
        from collections import Counter
        if k < 0:
            return 0
        if k == 0:
            counter = Counter(nums)
            return sum(1 for n, c in counter.most_common() if c > 1)
        nums = set(nums)
        diffs = [x - k for x in nums]
        return sum([1 for x in diffs if x in nums])
        """
        class Solution:
            def findPairs(self, nums: List[int], k: int) -> int:
                if k < 0:
                    return 0
                store = set()
                result = set()
                for num in nums:
                    if num + k in store:
                        result.add(num + k)
                    if num - k in store:
                        result.add(num)
                    store.add(num)
                return len(result)
